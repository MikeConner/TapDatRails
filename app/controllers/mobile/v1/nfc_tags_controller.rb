class Mobile::V1::NfcTagsController < ApiController
  include AbstractController::Rendering
  include ActionView::Layouts

  append_view_path "#{Rails.root}/app/views"  
  
  before_filter :authenticate_user_from_token!, :except => [:show]
  
  # GET /mobile/:version/nfc_tags
  def index
    response = []
    
    current_user.nfc_tags.each do |tag|
      payloads = []
      tag.payloads.each do |payload|
        payloads.push({:description => payload.description, 
                       :threshold => payload.threshold, 
                       :uri => payload.uri, 
                       :content => payload.content, 
                       :content_type => payload.content_type, 
                       :payload_image => payload.mobile_payload_image_url || payload.payload_image.url,
                       :payload_thumb => payload.payload_image_url(:thumb).to_s || payload.payload_image_url(:thumb).to_s,
                       :slug => payload.slug, })
      end
      
      response.push({:id => tag.legible_id, :name => tag.name, :system_id => tag.id, :currency_id => tag.currency_id, :payloads => payloads})
    end
    
    expose response
  rescue Exception => ex
    error! :bad_request, :metadata => {:error_description => ex.message, :user_error => I18n.t('tag_list_error') }    
  end

  # POST /mobile/:version/nfc_tags
  def create
    if params[:tag].blank?
      error! :bad_request, :metadata => {:error_description => I18n.t('missing_argument', :arg => 'tag'), :user_error => I18n.t('tag_create_error') } 
    elsif params[:payloads].blank?
      error! :bad_request, :metadata => {:error_description => I18n.t('missing_argument', :arg => 'payloads'), :user_error => I18n.t('tag_create_error') } 
    else
      if params[:tag][:name].blank?
        error! :bad_request, :metadata => {:error_description => I18n.t('missing_argument', :arg => 'tag:name'), :user_error => I18n.t('tag_create_error') } 
      else
        # If parameter is blank, it's a bitcoin-only tag
        currency = Currency.find_by_id(params[:tag][:currency_id])

        if currency.nil? and !params[:tag][:currency_id].blank?
          error! :bad_request, :metadata => {:error_description => I18n.t('invalid_currency'), :user_error => I18n.t('tag_create_error') } 
        elsif !currency.nil? and (currency.user_id != current_user.id)
          error! :bad_request, :metadata => {:error_description => I18n.t('not_currency_owner'), :user_error => I18n.t('tag_create_error') } 
        else
          ActiveRecord::Base.transaction do
            begin
              tag = current_user.nfc_tags.create!(:tag_id => NfcTag::generate_tag_id, :name => params[:tag][:name], :currency_id => currency.id)

              params[:payloads].each do |payload|
                tag.payloads.create!(:threshold => payload[:threshold], 
                                     :content_type => payload[:content_type], 
                                     :description => payload[:description],
                                     :mobile_payload_image_url => payload[:payload_image],
                                     :mobile_payload_thumb_url => payload[:payload_thumb],
                                     :uri => payload[:uri],
                                     :content => payload[:content])
               end
              
              response = {:id => tag.legible_id, :name => tag.name, :system_id => tag.id}
              expose response             
            rescue ActiveRecord::Rollback => ex
              error! :bad_request, :metadata => {:error_description => ex.message, :user_error => I18n.t('tag_create_error') }
            end
          end
        end
      end    
    end        
  end
  
  # PUT /mobile/:version/nfc_tags/:id
  # Can pass in the real id (generated by Rails), or set it to 0 and supply the tag_id
  def update
    if params[:tag_id].blank? and params[:id].blank?
      error! :bad_request, :metadata => {:error_description => I18n.t('missing_argument', :arg => 'tag_id'), :user_error => I18n.t('tag_update_error') }
    else
      tag = params[:tag_id].blank? ? current_user.nfc_tags.find(params[:id]) : 
                                     current_user.nfc_tags.find_by_tag_id(params[:tag_id].gsub('-', ''))
      
      if tag.nil?
        error! :not_found, :metadata => {:error_description => I18n.t('object_not_found', :obj => 'NFC Tag'), :user_error => I18n.t('invalid_tag') }
      else
        begin 
          ActiveRecord::Base.transaction do
            begin
              tag.update_attribute(:name, params[:tag][:name]) if params.has_key?(:tag) and params[:tag].has_key?(:name)
              
              unless params[:payloads].nil? or params[:payloads].empty?
                tag.payloads.destroy_all
                
                params[:payloads].each do |payload|
                  tag.payloads.create!(:threshold => payload[:threshold], 
                                       :content_type => payload[:content_type], 
                                       :description => payload[:description],
                                       :mobile_payload_image_url => payload[:payload_image],
                                       :mobile_payload_thumb_url => payload[:payload_thumb],
                                       :uri => payload[:uri],
                                       :content => payload[:content])
                 end
              end
            rescue ActiveRecord::Rollback => ex
              error! :bad_request, :metadata => {:error_description => ex.message, :user_error => I18n.t('tag_create_error') }
            end
          end
          
          head :ok
        rescue Exception => ex
          error! :bad_request, :metadata => {:error_description => ex.message, :user_error => I18n.t('tag_update_error') } 
        end   
      end
    end    
  end
  
  # GET /mobile/:version/nfc_tags/:id
  def show
    @nfc_tag = NfcTag.find_by_tag_id(params[:id].gsub(/-/, ''))
    
    render :show
  end
  
  # DELETE /mobile/:version/nfc_tags/:id
  # Can pass in the real id (generated by Rails), or set it to 0 and supply the tag_id
  def destroy
    if params[:tag_id].blank? and (0 == params[:id].to_i)
      error! :bad_request, :metadata => {:error_description => I18n.t('missing_argument', :arg => 'tag_id'), :user_error => I18n.t('invalid_tag') }
    else
      tag = params[:tag_id].blank? ? current_user.nfc_tags.find_by_id(params[:id]) : 
                                     current_user.nfc_tags.find_by_tag_id(params[:tag_id].gsub('-', ''))
      
      if tag.nil?
        error! :not_found, :metadata => {:error_description => I18n.t('object_not_found', :obj => 'NFC Tag'), :user_error => I18n.t('invalid_tag') }
      else
        tag.destroy
        head :ok
      end
    end
  end
end
